#include <iostream>
#include <stdio.h>
// #define CATCH_CONFIG_MAIN
// #include <catch.h>
#include <math.h>
#include <convolution_3x3s1.h>
#include <opencv2/opencv.hpp>
using namespace std;
using namespace cv;

bool cmp(float x, float y){
    if(fabs(x - y) < 0.01){
        return true;
    }
    else{
        return false;
    }
}

// float a[100]={-1.1268, -1.0129, -1.6802,  0.4670,  0.6153, 0.3901, -1.0640, -0.2936, -1.2315,  0.5493,
//             -0.0420, -0.2721,  0.1954, -0.2216,  0.6879, -0.2050, -1.0803, -0.3176,  0.5296,  0.3935,
//             2.0697,  0.5919,  0.6199, -0.0346, -0.7999, 0.2293, -1.5282,  1.0790, -0.2825,  1.0728,
//             -0.4607, -0.7011, -0.2361,  0.2906,  0.1105, -0.9928, -0.5154,  0.7045, -0.9297,  0.7138,
//             -0.3283,  0.2736, -0.8493, -0.7276,  2.4235, -0.6976,  1.2200, -0.4467,  1.7764, -0.0902,
//             -0.5115,  0.7125,  2.6900,  1.6307, -1.0520, 0.8062, -1.5037, -0.2208, -0.3704, -0.0657,
//             -0.7742, -0.5371,  0.1098, -1.2455, -1.6273, -0.7954, -0.0381, -0.9875,  0.6384,  0.0350,
//             0.5414,  0.6222, -0.6658,  0.3772, -0.8883};

// float b[200]={-0.0073,  0.1526, -0.0270,
//           -0.0072,  0.0659,  0.1265,
//            0.1657, -0.0500,  0.0438,

//          -0.0798,  0.0382, -0.0959,
//           -0.0398, -0.0483, -0.1100,
//            0.0023,  0.0489,  0.0612,

//          -0.1398, -0.1093,  0.1475,
//            0.1383,  0.0858, -0.0167,
//           -0.0942, -0.0131, -0.1723,


//          0.0643,  0.1751, -0.0905,
//           -0.1898, -0.0066,  0.0137,
//           -0.0252,  0.0558,  0.1431,

//          -0.1606, -0.0474, -0.0856,
//           -0.0632, -0.0011, -0.0256,
//           -0.0368,  0.0699,  0.0243,

//          -0.1506, -0.0868,  0.1396,
//            0.0641, -0.1450,  0.0830,
//           -0.0781, -0.1140, -0.1721,


//         -0.0237, -0.0605, -0.0206,
//            0.0383, -0.0095,  0.0241,
//           -0.0739,  0.1794, -0.1479,

//           0.0660, -0.0909, -0.0488,
//           -0.0889, -0.0074,  0.1274,
//            0.0130, -0.1445,  0.0469,

//          -0.1116,  0.0339, -0.0671,
//           -0.1096, -0.1420, -0.1370,
//            0.0070, -0.1404, -0.1416,


//         -0.0915, -0.1106, -0.0094,
//            0.1703, -0.1753, -0.0935,
//           -0.1359,  0.0788, -0.0177,

//          -0.1294, -0.0438, -0.0608,
//           -0.1557, -0.1188,  0.1214,
//           -0.0438, -0.1629, -0.0785,

//          -0.0058,  0.1322,  0.1835,
//           -0.0944, -0.0943, -0.0746,
//           -0.0756, -0.1007, -0.0068};

// float c[200]={0.1554, -0.4298, -0.5700, -0.0541, -0.0924, -0.0473, 0.4419,  0.1781, -0.1656,
//             0.5869,  0.1084, -0.4887, 0.2125,  0.2375, -0.1172, 0.3615,  0.4178, -0.2846,
//             0.3886,  0.2065,  0.4286, 0.2377,  0.4176,  0.6548, -0.1712,  0.2952,  0.4079,
//             1.4470,  1.5160,  0.2381, 0.4402,  0.4872,  0.4865, -0.1318, -0.4056, -0.5152};

float a[200]={ 0.5760, -1.1760, -0.8972,  1.0299, -0.3748,
           0.1898,  0.8822,  1.4099, -0.4741,  0.7740,
          -1.3337,  0.1868,  1.0449,  1.3567, -0.4194,
          -0.4207,  0.6415, -0.8749, -1.7602, -2.0643,
          -0.0924, -0.8200,  0.5525,  1.1502,  0.7757,

          1.7760, -0.1975, -1.7408, -0.0924,  0.7108,
          -2.2053, -0.7326, -0.5420, -0.9169,  0.0294,
          -1.8527, -0.2263,  0.2955,  0.3070, -0.2555,
           0.3073, -0.7970, -0.4282,  1.0514,  0.3157,
          -1.5033, -0.3214,  0.0407, -1.0022,  0.5579,

         -0.7023,  2.2751, -3.3590, -0.4246, -1.0267,
           0.6343,  1.4737, -0.3416, -1.3467, -1.3986,
          -2.0268, -0.5595, -0.7821,  1.0125, -0.5578,
          -0.9306,  0.4089, -0.4382,  0.2682,  1.7043,
           0.4938, -0.1858,  0.4777, -1.2011, -0.3060};

float b[200]={-0.0397,  0.0159, -0.0050,
           0.1580,  0.1782, -0.1321,
          -0.0195, -0.1133, -0.1026,

          0.1102, -0.0815,  0.1718,
           0.1093, -0.0631,  0.1332,
          -0.1238, -0.0931,  0.0718,

          0.1541,  0.1007, -0.1837,
           0.1740, -0.0095, -0.0315,
          -0.1380, -0.0044, -0.1197,


         0.1225,  0.0424, -0.1462,
          -0.1614,  0.1138, -0.1181,
          -0.0562, -0.1820, -0.0884,

          0.1593,  0.0148,  0.0041,
           0.0757, -0.1585,  0.1188,
           0.0744,  0.0242,  0.0610,

          0.0688,  0.0808,  0.0642,
          -0.0030, -0.0041,  0.0181,
          -0.1603, -0.1085, -0.1794,


        -0.0884,  0.0287,  0.1166,
           0.0515, -0.0437, -0.0492,
          -0.1197, -0.0985, -0.0583,

         -0.0174,  0.1539, -0.1205,
           0.1023, -0.1576, -0.0946,
          -0.0066,  0.1350, -0.0957,

          0.1686,  0.1074, -0.0189,
           0.1460,  0.1790,  0.0705,
          -0.0215,  0.1550,  0.1852,


         0.1685,  0.0559,  0.0865,
          -0.0311, -0.0477, -0.1311,
          -0.1288, -0.0031, -0.0559,

         -0.1690,  0.0478, -0.0412,
          -0.0344, -0.1404, -0.1735,
           0.0985, -0.1613,  0.0008,

          0.0967, -0.0646,  0.0997,
           0.1187, -0.0372,  0.0199,
           0.1483, -0.0818,  0.1393,


        -0.1439, -0.1793,  0.1855,
           0.1121, -0.1415, -0.1484,
          -0.0478,  0.1265,  0.1633,

         -0.0294,  0.0770, -0.0365,
          -0.0174, -0.1845, -0.0982,
           0.0478, -0.0346, -0.0093,

          0.1639, -0.1776, -0.0156,
           0.1874, -0.0848, -0.0199,
          -0.1355, -0.0703,  0.0245};

float c[200]={
    0.9999,  0.5298, -0.3883,
          -0.5454,  0.5425,  0.5958,
          -0.1385, -0.0531, -0.4695,

          0.4677, -0.8829, -1.0414,
          -0.1858,  0.2273, -0.0155,
          -0.6605, -0.1024,  0.1563,

          0.1695,  0.0251, -0.9447,
          -0.3544, -0.2359,  0.5694,
          -0.0114, -0.0331, -0.7104,

         -1.1773,  0.5273, -0.6767,
           0.2268,  0.1585,  0.2188,
           0.1091,  0.3388,  0.3348,

         -0.1249,  2.3532, -0.1217,
          -0.5599, -1.0785, -0.5910,
           0.0209,  0.8936, -0.3561
};


int main(){
    const int inw = 5;
    const int inh = 5;
    const int inch = 3;
    const int kw = 3;
    const int kh = 3;
    const int outw = inw - kw + 1;
    const int outh = inh - kh + 1;
    const int outch = 5;

    //5x5x3
    float *src = new float[inw * inh * inch];
    //3x3x4
    float *kernel = new float[kw * kh * outch * inch];
    //3x3x4
    float *dest = new float[outw * outh * outch];

    //赋值
    for(int i = 0; i < inw * inh * inch; i++){
        src[i] = a[i];
    }

    for(int i = 0; i < kw * kh * inch * outch; i++){
        kernel[i] = b[i];
    }
    
    int64 st = cvGetTickCount();

    for(int i = 0; i < 10; i++){
        conv3x3s1_neon(src, inw, inh, inch, kernel, dest, outw, outh, outch);
    }
    
    double duration = (cv::getTickCount() - st) / cv::getTickFrequency() * 100;

    for(int i = 0; i < outw * outh * outch ; i++){
        bool flag = cmp(dest[i], c[i]);
        if(flag == false){
            printf("WA: %d\n", i);
            printf("Expected: %.4f, ConvOutput: %.4f\n", c[i], dest[i]);
        }
    }

    printf("Time: %.5f\n", duration);

    for(int i = 0; i < outw * outh * outch; i++){
        printf("%.5f ", dest[i]);
    }

    printf("\n");
    free(src);
    free(kernel);
    free(dest);

    return 0;
}